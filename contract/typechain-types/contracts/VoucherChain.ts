/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace VoucherChain {
  export type VoucherBatchStruct = {
    voucherHashes: BytesLike[];
    tokens: AddressLike[];
    tokenValues: BigNumberish[];
    expiryDays: BigNumberish[];
  };

  export type VoucherBatchStructOutput = [
    voucherHashes: string[],
    tokens: string[],
    tokenValues: bigint[],
    expiryDays: bigint[]
  ] & {
    voucherHashes: string[];
    tokens: string[];
    tokenValues: bigint[];
    expiryDays: bigint[];
  };
}

export interface VoucherChainInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAuthorizedMinter"
      | "addSupportedToken"
      | "agentBalances"
      | "agents"
      | "authorizedMinters"
      | "deactivateAgent"
      | "defaultExpiryDays"
      | "getAgentStats"
      | "getAgentTokenBalance"
      | "getContractStats"
      | "getContractTokenBalance"
      | "getTokenStats"
      | "getVoucherStatus"
      | "isTokenSupported"
      | "mintVoucher"
      | "mintVoucherBatch"
      | "mintingFee"
      | "owner"
      | "reclaimExpiredVoucher"
      | "redeemVoucher"
      | "redemptionFee"
      | "registerAgent"
      | "removeAuthorizedMinter"
      | "removeSupportedToken"
      | "renounceOwnership"
      | "settleAgentBalance"
      | "supportedTokens"
      | "totalTokensRedeemed"
      | "totalVouchersMinted"
      | "totalVouchersRedeemed"
      | "transferOwnership"
      | "treasury"
      | "updateDefaultExpiryDays"
      | "updateFees"
      | "updateTreasury"
      | "vouchers"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AgentBalanceSettled"
      | "AgentDeactivated"
      | "AgentRegistered"
      | "FeesUpdated"
      | "OwnershipTransferred"
      | "TokenSupported"
      | "TreasuryUpdated"
      | "VoucherBatchMinted"
      | "VoucherMinted"
      | "VoucherReclaimed"
      | "VoucherRedeemed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addAuthorizedMinter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addSupportedToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "agentBalances",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "agents", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "authorizedMinters",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateAgent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultExpiryDays",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentTokenBalance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractTokenBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoucherStatus",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenSupported",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintVoucher",
    values: [BytesLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintVoucherBatch",
    values: [VoucherChain.VoucherBatchStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "mintingFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reclaimExpiredVoucher",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemVoucher",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redemptionFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerAgent",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAuthorizedMinter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSupportedToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "settleAgentBalance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalTokensRedeemed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalVouchersMinted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVouchersRedeemed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateDefaultExpiryDays",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFees",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTreasury",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "vouchers", values: [BytesLike]): string;

  decodeFunctionResult(
    functionFragment: "addAuthorizedMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSupportedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "agentBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "agents", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizedMinters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultExpiryDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoucherStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintVoucher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintVoucherBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintingFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reclaimExpiredVoucher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemVoucher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redemptionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorizedMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSupportedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleAgentBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTokensRedeemed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVouchersMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVouchersRedeemed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateDefaultExpiryDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vouchers", data: BytesLike): Result;
}

export namespace AgentBalanceSettledEvent {
  export type InputTuple = [
    agent: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [agent: string, token: string, amount: bigint];
  export interface OutputObject {
    agent: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgentDeactivatedEvent {
  export type InputTuple = [agent: AddressLike];
  export type OutputTuple = [agent: string];
  export interface OutputObject {
    agent: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgentRegisteredEvent {
  export type InputTuple = [agent: AddressLike, commissionRate: BigNumberish];
  export type OutputTuple = [agent: string, commissionRate: bigint];
  export interface OutputObject {
    agent: string;
    commissionRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesUpdatedEvent {
  export type InputTuple = [
    mintingFee: BigNumberish,
    redemptionFee: BigNumberish
  ];
  export type OutputTuple = [mintingFee: bigint, redemptionFee: bigint];
  export interface OutputObject {
    mintingFee: bigint;
    redemptionFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenSupportedEvent {
  export type InputTuple = [token: AddressLike, supported: boolean];
  export type OutputTuple = [token: string, supported: boolean];
  export interface OutputObject {
    token: string;
    supported: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasuryUpdatedEvent {
  export type InputTuple = [newTreasury: AddressLike];
  export type OutputTuple = [newTreasury: string];
  export interface OutputObject {
    newTreasury: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoucherBatchMintedEvent {
  export type InputTuple = [
    issuer: AddressLike,
    batchSize: BigNumberish,
    totalValue: BigNumberish
  ];
  export type OutputTuple = [
    issuer: string,
    batchSize: bigint,
    totalValue: bigint
  ];
  export interface OutputObject {
    issuer: string;
    batchSize: bigint;
    totalValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoucherMintedEvent {
  export type InputTuple = [
    voucherHash: BytesLike,
    token: AddressLike,
    tokenValue: BigNumberish,
    issuer: AddressLike,
    expiryTimestamp: BigNumberish
  ];
  export type OutputTuple = [
    voucherHash: string,
    token: string,
    tokenValue: bigint,
    issuer: string,
    expiryTimestamp: bigint
  ];
  export interface OutputObject {
    voucherHash: string;
    token: string;
    tokenValue: bigint;
    issuer: string;
    expiryTimestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoucherReclaimedEvent {
  export type InputTuple = [
    voucherHash: BytesLike,
    token: AddressLike,
    agent: AddressLike,
    tokenValue: BigNumberish
  ];
  export type OutputTuple = [
    voucherHash: string,
    token: string,
    agent: string,
    tokenValue: bigint
  ];
  export interface OutputObject {
    voucherHash: string;
    token: string;
    agent: string;
    tokenValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoucherRedeemedEvent {
  export type InputTuple = [
    voucherHash: BytesLike,
    token: AddressLike,
    recipient: AddressLike,
    tokenValue: BigNumberish,
    fee: BigNumberish
  ];
  export type OutputTuple = [
    voucherHash: string,
    token: string,
    recipient: string,
    tokenValue: bigint,
    fee: bigint
  ];
  export interface OutputObject {
    voucherHash: string;
    token: string;
    recipient: string;
    tokenValue: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VoucherChain extends BaseContract {
  connect(runner?: ContractRunner | null): VoucherChain;
  waitForDeployment(): Promise<this>;

  interface: VoucherChainInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAuthorizedMinter: TypedContractMethod<
    [minter: AddressLike],
    [void],
    "nonpayable"
  >;

  addSupportedToken: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  agentBalances: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  agents: TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint, bigint, bigint] & {
        isActive: boolean;
        totalMinted: bigint;
        totalValue: bigint;
        commissionRate: bigint;
        lastSettlement: bigint;
      }
    ],
    "view"
  >;

  authorizedMinters: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  deactivateAgent: TypedContractMethod<
    [agent: AddressLike],
    [void],
    "nonpayable"
  >;

  defaultExpiryDays: TypedContractMethod<[], [bigint], "view">;

  getAgentStats: TypedContractMethod<
    [agent: AddressLike],
    [
      [boolean, bigint, bigint, bigint, bigint] & {
        isActive: boolean;
        totalMinted: bigint;
        totalValue: bigint;
        commissionRate: bigint;
        lastSettlement: bigint;
      }
    ],
    "view"
  >;

  getAgentTokenBalance: TypedContractMethod<
    [agent: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;

  getContractStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        totalMinted: bigint;
        totalRedeemed: bigint;
        mintingFeeRate: bigint;
        redemptionFeeRate: bigint;
      }
    ],
    "view"
  >;

  getContractTokenBalance: TypedContractMethod<
    [token: AddressLike],
    [bigint],
    "view"
  >;

  getTokenStats: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  getVoucherStatus: TypedContractMethod<
    [voucherCode: string],
    [
      [boolean, boolean, string, bigint, string, bigint] & {
        exists: boolean;
        isRedeemed: boolean;
        token: string;
        tokenValue: bigint;
        issuer: string;
        expiryTimestamp: bigint;
      }
    ],
    "view"
  >;

  isTokenSupported: TypedContractMethod<
    [token: AddressLike],
    [boolean],
    "view"
  >;

  mintVoucher: TypedContractMethod<
    [
      voucherHash: BytesLike,
      token: AddressLike,
      tokenValue: BigNumberish,
      expiryDays: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  mintVoucherBatch: TypedContractMethod<
    [batch: VoucherChain.VoucherBatchStruct],
    [void],
    "nonpayable"
  >;

  mintingFee: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  reclaimExpiredVoucher: TypedContractMethod<
    [voucherCode: string],
    [void],
    "nonpayable"
  >;

  redeemVoucher: TypedContractMethod<
    [voucherCode: string, recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  redemptionFee: TypedContractMethod<[], [bigint], "view">;

  registerAgent: TypedContractMethod<
    [agent: AddressLike, commissionRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeAuthorizedMinter: TypedContractMethod<
    [minter: AddressLike],
    [void],
    "nonpayable"
  >;

  removeSupportedToken: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  settleAgentBalance: TypedContractMethod<
    [agent: AddressLike, token: AddressLike],
    [void],
    "nonpayable"
  >;

  supportedTokens: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  totalTokensRedeemed: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  totalVouchersMinted: TypedContractMethod<[], [bigint], "view">;

  totalVouchersRedeemed: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  treasury: TypedContractMethod<[], [string], "view">;

  updateDefaultExpiryDays: TypedContractMethod<
    [_defaultExpiryDays: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateFees: TypedContractMethod<
    [_mintingFee: BigNumberish, _redemptionFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateTreasury: TypedContractMethod<
    [_treasury: AddressLike],
    [void],
    "nonpayable"
  >;

  vouchers: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, boolean, string, bigint, bigint, boolean] & {
        voucherHash: string;
        token: string;
        tokenValue: bigint;
        isRedeemed: boolean;
        issuer: string;
        mintTimestamp: bigint;
        expiryTimestamp: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAuthorizedMinter"
  ): TypedContractMethod<[minter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addSupportedToken"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "agentBalances"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "agents"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint, bigint, bigint] & {
        isActive: boolean;
        totalMinted: bigint;
        totalValue: bigint;
        commissionRate: bigint;
        lastSettlement: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "authorizedMinters"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "deactivateAgent"
  ): TypedContractMethod<[agent: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "defaultExpiryDays"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAgentStats"
  ): TypedContractMethod<
    [agent: AddressLike],
    [
      [boolean, bigint, bigint, bigint, bigint] & {
        isActive: boolean;
        totalMinted: bigint;
        totalValue: bigint;
        commissionRate: bigint;
        lastSettlement: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAgentTokenBalance"
  ): TypedContractMethod<
    [agent: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContractStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        totalMinted: bigint;
        totalRedeemed: bigint;
        mintingFeeRate: bigint;
        redemptionFeeRate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContractTokenBalance"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenStats"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVoucherStatus"
  ): TypedContractMethod<
    [voucherCode: string],
    [
      [boolean, boolean, string, bigint, string, bigint] & {
        exists: boolean;
        isRedeemed: boolean;
        token: string;
        tokenValue: bigint;
        issuer: string;
        expiryTimestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isTokenSupported"
  ): TypedContractMethod<[token: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "mintVoucher"
  ): TypedContractMethod<
    [
      voucherHash: BytesLike,
      token: AddressLike,
      tokenValue: BigNumberish,
      expiryDays: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintVoucherBatch"
  ): TypedContractMethod<
    [batch: VoucherChain.VoucherBatchStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintingFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "reclaimExpiredVoucher"
  ): TypedContractMethod<[voucherCode: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "redeemVoucher"
  ): TypedContractMethod<
    [voucherCode: string, recipient: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redemptionFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "registerAgent"
  ): TypedContractMethod<
    [agent: AddressLike, commissionRate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeAuthorizedMinter"
  ): TypedContractMethod<[minter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeSupportedToken"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "settleAgentBalance"
  ): TypedContractMethod<
    [agent: AddressLike, token: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportedTokens"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalTokensRedeemed"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalVouchersMinted"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalVouchersRedeemed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateDefaultExpiryDays"
  ): TypedContractMethod<
    [_defaultExpiryDays: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateFees"
  ): TypedContractMethod<
    [_mintingFee: BigNumberish, _redemptionFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateTreasury"
  ): TypedContractMethod<[_treasury: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vouchers"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, boolean, string, bigint, bigint, boolean] & {
        voucherHash: string;
        token: string;
        tokenValue: bigint;
        isRedeemed: boolean;
        issuer: string;
        mintTimestamp: bigint;
        expiryTimestamp: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "AgentBalanceSettled"
  ): TypedContractEvent<
    AgentBalanceSettledEvent.InputTuple,
    AgentBalanceSettledEvent.OutputTuple,
    AgentBalanceSettledEvent.OutputObject
  >;
  getEvent(
    key: "AgentDeactivated"
  ): TypedContractEvent<
    AgentDeactivatedEvent.InputTuple,
    AgentDeactivatedEvent.OutputTuple,
    AgentDeactivatedEvent.OutputObject
  >;
  getEvent(
    key: "AgentRegistered"
  ): TypedContractEvent<
    AgentRegisteredEvent.InputTuple,
    AgentRegisteredEvent.OutputTuple,
    AgentRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "FeesUpdated"
  ): TypedContractEvent<
    FeesUpdatedEvent.InputTuple,
    FeesUpdatedEvent.OutputTuple,
    FeesUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TokenSupported"
  ): TypedContractEvent<
    TokenSupportedEvent.InputTuple,
    TokenSupportedEvent.OutputTuple,
    TokenSupportedEvent.OutputObject
  >;
  getEvent(
    key: "TreasuryUpdated"
  ): TypedContractEvent<
    TreasuryUpdatedEvent.InputTuple,
    TreasuryUpdatedEvent.OutputTuple,
    TreasuryUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "VoucherBatchMinted"
  ): TypedContractEvent<
    VoucherBatchMintedEvent.InputTuple,
    VoucherBatchMintedEvent.OutputTuple,
    VoucherBatchMintedEvent.OutputObject
  >;
  getEvent(
    key: "VoucherMinted"
  ): TypedContractEvent<
    VoucherMintedEvent.InputTuple,
    VoucherMintedEvent.OutputTuple,
    VoucherMintedEvent.OutputObject
  >;
  getEvent(
    key: "VoucherReclaimed"
  ): TypedContractEvent<
    VoucherReclaimedEvent.InputTuple,
    VoucherReclaimedEvent.OutputTuple,
    VoucherReclaimedEvent.OutputObject
  >;
  getEvent(
    key: "VoucherRedeemed"
  ): TypedContractEvent<
    VoucherRedeemedEvent.InputTuple,
    VoucherRedeemedEvent.OutputTuple,
    VoucherRedeemedEvent.OutputObject
  >;

  filters: {
    "AgentBalanceSettled(address,address,uint256)": TypedContractEvent<
      AgentBalanceSettledEvent.InputTuple,
      AgentBalanceSettledEvent.OutputTuple,
      AgentBalanceSettledEvent.OutputObject
    >;
    AgentBalanceSettled: TypedContractEvent<
      AgentBalanceSettledEvent.InputTuple,
      AgentBalanceSettledEvent.OutputTuple,
      AgentBalanceSettledEvent.OutputObject
    >;

    "AgentDeactivated(address)": TypedContractEvent<
      AgentDeactivatedEvent.InputTuple,
      AgentDeactivatedEvent.OutputTuple,
      AgentDeactivatedEvent.OutputObject
    >;
    AgentDeactivated: TypedContractEvent<
      AgentDeactivatedEvent.InputTuple,
      AgentDeactivatedEvent.OutputTuple,
      AgentDeactivatedEvent.OutputObject
    >;

    "AgentRegistered(address,uint256)": TypedContractEvent<
      AgentRegisteredEvent.InputTuple,
      AgentRegisteredEvent.OutputTuple,
      AgentRegisteredEvent.OutputObject
    >;
    AgentRegistered: TypedContractEvent<
      AgentRegisteredEvent.InputTuple,
      AgentRegisteredEvent.OutputTuple,
      AgentRegisteredEvent.OutputObject
    >;

    "FeesUpdated(uint256,uint256)": TypedContractEvent<
      FeesUpdatedEvent.InputTuple,
      FeesUpdatedEvent.OutputTuple,
      FeesUpdatedEvent.OutputObject
    >;
    FeesUpdated: TypedContractEvent<
      FeesUpdatedEvent.InputTuple,
      FeesUpdatedEvent.OutputTuple,
      FeesUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TokenSupported(address,bool)": TypedContractEvent<
      TokenSupportedEvent.InputTuple,
      TokenSupportedEvent.OutputTuple,
      TokenSupportedEvent.OutputObject
    >;
    TokenSupported: TypedContractEvent<
      TokenSupportedEvent.InputTuple,
      TokenSupportedEvent.OutputTuple,
      TokenSupportedEvent.OutputObject
    >;

    "TreasuryUpdated(address)": TypedContractEvent<
      TreasuryUpdatedEvent.InputTuple,
      TreasuryUpdatedEvent.OutputTuple,
      TreasuryUpdatedEvent.OutputObject
    >;
    TreasuryUpdated: TypedContractEvent<
      TreasuryUpdatedEvent.InputTuple,
      TreasuryUpdatedEvent.OutputTuple,
      TreasuryUpdatedEvent.OutputObject
    >;

    "VoucherBatchMinted(address,uint256,uint256)": TypedContractEvent<
      VoucherBatchMintedEvent.InputTuple,
      VoucherBatchMintedEvent.OutputTuple,
      VoucherBatchMintedEvent.OutputObject
    >;
    VoucherBatchMinted: TypedContractEvent<
      VoucherBatchMintedEvent.InputTuple,
      VoucherBatchMintedEvent.OutputTuple,
      VoucherBatchMintedEvent.OutputObject
    >;

    "VoucherMinted(bytes32,address,uint256,address,uint256)": TypedContractEvent<
      VoucherMintedEvent.InputTuple,
      VoucherMintedEvent.OutputTuple,
      VoucherMintedEvent.OutputObject
    >;
    VoucherMinted: TypedContractEvent<
      VoucherMintedEvent.InputTuple,
      VoucherMintedEvent.OutputTuple,
      VoucherMintedEvent.OutputObject
    >;

    "VoucherReclaimed(bytes32,address,address,uint256)": TypedContractEvent<
      VoucherReclaimedEvent.InputTuple,
      VoucherReclaimedEvent.OutputTuple,
      VoucherReclaimedEvent.OutputObject
    >;
    VoucherReclaimed: TypedContractEvent<
      VoucherReclaimedEvent.InputTuple,
      VoucherReclaimedEvent.OutputTuple,
      VoucherReclaimedEvent.OutputObject
    >;

    "VoucherRedeemed(bytes32,address,address,uint256,uint256)": TypedContractEvent<
      VoucherRedeemedEvent.InputTuple,
      VoucherRedeemedEvent.OutputTuple,
      VoucherRedeemedEvent.OutputObject
    >;
    VoucherRedeemed: TypedContractEvent<
      VoucherRedeemedEvent.InputTuple,
      VoucherRedeemedEvent.OutputTuple,
      VoucherRedeemedEvent.OutputObject
    >;
  };
}
